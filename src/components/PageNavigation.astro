---
import { withBase } from '../utils/paths';
import { NAV_ITEMS } from '../config/constants';

interface Props {
  currentPage: string;
}

const { currentPage } = Astro.props;

// Find current page index in NAV_ITEMS
const currentIndex = NAV_ITEMS.findIndex(page => page.key === currentPage);
const prevPage = currentIndex > 0 ? NAV_ITEMS[currentIndex - 1] : null;
const nextPage = currentIndex < NAV_ITEMS.length - 1 ? NAV_ITEMS[currentIndex + 1] : null;
---

<nav class="page-navigation" aria-label="Page navigation">
  <div class="page-nav-container">
    {prevPage && (
      <a href={withBase(prevPage.href)} class="page-nav-link page-nav-prev" aria-label={`Go to previous page: ${prevPage.label}`}>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
          <path d="M19 12H5M12 19l-7-7 7-7"/>
        </svg>
        <div class="page-nav-content">
          <span class="page-nav-label">Previous</span>
          <span class="page-nav-title">{prevPage.label}</span>
        </div>
      </a>
    )}
    
    {!prevPage && <div class="page-nav-spacer"></div>}
    
    {nextPage && (
      <a href={withBase(nextPage.href)} class="page-nav-link page-nav-next" aria-label={`Go to next page: ${nextPage.label}`}>
        <div class="page-nav-content">
          <span class="page-nav-label">Next</span>
          <span class="page-nav-title">{nextPage.label}</span>
        </div>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
          <path d="M5 12h14M12 5l7 7-7 7"/>
        </svg>
      </a>
    )}
    
    {!nextPage && <div class="page-nav-spacer"></div>}
  </div>
</nav>

<style>
  .page-navigation {
    width: var(--shell-width);
    margin: var(--space-3xl) auto var(--space-2xl);
    padding: 0 var(--shell-padding);
  }
  
  .page-nav-container {
    display: flex;
    justify-content: space-between;
    gap: var(--space-md);
  }
  
  .page-nav-link {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--radius-md);
    background: rgba(6, 12, 22, 0.58);
    border: 1px solid rgba(93, 225, 228, 0.14);
    backdrop-filter: blur(18px);
    color: var(--color-text-muted);
    text-decoration: none;
    transition: all var(--transition-base);
    flex: 0 1 auto;
    max-width: 45%;
  }
  
  .page-nav-link:hover,
  .page-nav-link:focus-visible {
    border-color: var(--color-primary-bright);
    background: rgba(10, 147, 150, 0.12);
    color: var(--color-text);
    transform: translateY(-2px);
  }
  
  .page-nav-link svg {
    flex-shrink: 0;
    color: var(--color-primary-bright);
  }
  
  .page-nav-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .page-nav-label {
    font-size: var(--text-xs);
    text-transform: uppercase;
    letter-spacing: 0.08em;
    color: var(--color-text-muted);
  }
  
  .page-nav-title {
    font-size: var(--text-base);
    font-weight: var(--font-weight-medium);
    color: var(--color-text);
  }
  
  .page-nav-prev {
    text-align: left;
  }
  
  .page-nav-next {
    text-align: right;
    margin-left: auto;
  }
  
  .page-nav-spacer {
    flex: 0 1 auto;
    max-width: 45%;
  }
  
  /* Mobile */
  @media (max-width: 640px) {
    .page-nav-link {
      padding: var(--space-sm) var(--space-md);
      max-width: 48%;
    }
    
    .page-nav-content {
      gap: 0.125rem;
    }
    
    .page-nav-label {
      font-size: 0.65rem;
    }
    
    .page-nav-title {
      font-size: var(--text-sm);
    }
  }
  
  /* Print */
  @media print {
    .page-navigation {
      display: none;
    }
  }
</style>